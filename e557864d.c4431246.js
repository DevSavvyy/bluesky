(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{152:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var r=n(1),l=n(9),o=(n(0),n(160)),i={id:"logger",title:"Logger Component",sidebar_label:"Logger"},a={id:"base/logger",title:"Logger Component",description:"<div style={{ width: 'fit-content', margin: 'auto', textAlign: 'center' }}>\r",source:"@site/docs\\base\\logger.md",permalink:"/bluesky/docs/base/logger",editUrl:"https://github.com/Alzar/bluesky/edit/documentation/docs/base/logger.md",sidebar_label:"Logger",sidebar:"someSidebar",previous:{title:"Discord Component",permalink:"/bluesky/docs/base/discord"},next:{title:"Scaleform Component",permalink:"/bluesky/docs/base/scaleform"}},c=[{value:"Required Attributes",id:"required-attributes",children:[{value:"<strong>Server</strong>",id:"server",children:[]},{value:"<strong>Client</strong>",id:"client",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<strong>Server</strong>",id:"server-1",children:[]},{value:"<strong>Client</strong>",id:"client-1",children:[]}]},{value:"Events",id:"events",children:[{value:"<strong>Server</strong>",id:"server-2",children:[]},{value:"<strong>Client</strong>",id:"client-2",children:[]}]}],b={rightToc:c};function s(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{style:{width:"fit-content",margin:"auto",textAlign:"center"}},Object(o.b)("table",null,Object(o.b)("tr",null,Object(o.b)("td",{colspan:"2"},"Component Available")),Object(o.b)("tr",null,Object(o.b)("td",null,"Server"),Object(o.b)("td",null,"Yes")),Object(o.b)("tr",null,Object(o.b)("td",null,"Client"),Object(o.b)("td",null,"Yes")))),Object(o.b)("p",null,"This is the logger class, which will output data to various locations"),Object(o.b)("h2",{id:"required-attributes"},"Required Attributes"),Object(o.b)("hr",null),Object(o.b)("h3",{id:"server"},Object(o.b)("strong",{parentName:"h3"},"Server")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Log: function"))),Object(o.b)("h3",{id:"client"},Object(o.b)("strong",{parentName:"h3"},"Client")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Log: function"))),Object(o.b)("h2",{id:"methods"},"Methods"),Object(o.b)("hr",null),Object(o.b)("h3",{id:"server-1"},Object(o.b)("strong",{parentName:"h3"},"Server")),Object(o.b)("h4",{id:"log"},Object(o.b)("inlineCode",{parentName:"h4"},"Log")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Parameters"),": ",Object(o.b)("span",{style:{color:"#cecece"}},Object(o.b)("inlineCode",{parentName:"li"},"component: string, log: string, flags: table, extra: mixed"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Return"),": ",Object(o.b)("span",{style:{color:"#cecece"}},Object(o.b)("inlineCode",{parentName:"li"},"None"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Description"),": ",Object(o.b)("span",{style:{color:"#cecece"}},"Depending on the provided flag, this will log the input data.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Flags"),": ",Object(o.b)("span",{style:{color:"#cecece"}},Object(o.b)("inlineCode",{parentName:"li"},"console: boolean")," - If true, will print to console.",Object(o.b)("br",null),Object(o.b)("inlineCode",{parentName:"li"},"file: boolean")," - If true, will print to file.",Object(o.b)("br",null),Object(o.b)("inlineCode",{parentName:"li"},"database: boolean")," - If true, will save log entry to databse.",Object(o.b)("br",null),Object(o.b)("inlineCode",{parentName:"li"},"discord: boolean or table")," - If boolean & true, will simply print a basic message to Discord. If table, and provided values set will send an embeded message to Discord."))),Object(o.b)("h5",{id:"discord-flags"},Object(o.b)("inlineCode",{parentName:"h5"},"Discord Flags")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"color: info, success, warning, error")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"webhook: Link to webhook if desired to log to non-standard logging channel"))),Object(o.b)("h3",{id:"client-1"},Object(o.b)("strong",{parentName:"h3"},"Client")),Object(o.b)("h4",{id:"log-1"},Object(o.b)("inlineCode",{parentName:"h4"},"Log")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Parameters"),": ",Object(o.b)("span",{style:{color:"#cecece"}},Object(o.b)("inlineCode",{parentName:"li"},"component: string, log: string"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Return"),": ",Object(o.b)("span",{style:{color:"#cecece"}},Object(o.b)("inlineCode",{parentName:"li"},"None"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Description"),": ",Object(o.b)("span",{style:{color:"#cecece"}},"Will print out log into F8 console. ",Object(o.b)("br",null),Object(o.b)("br",null),Object(o.b)("b",null,"NOTE:")," As this is a component defined in a shared file, the client function can also take a flags & extra parameter. These are unused on client."))),Object(o.b)("h2",{id:"events"},"Events"),Object(o.b)("hr",null),Object(o.b)("h3",{id:"server-2"},Object(o.b)("strong",{parentName:"h3"},"Server")),Object(o.b)("p",null,"No server events are fired from this component."),Object(o.b)("h3",{id:"client-2"},Object(o.b)("strong",{parentName:"h3"},"Client")),Object(o.b)("p",null,"No client events are fired from this component."))}s.isMDXComponent=!0},160:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return O}));var r=n(0),l=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var b=l.a.createContext({}),s=function(e){var t=l.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):a({},t,{},e)),n},u=function(e){var t=s(e.components);return l.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},p=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),u=s(n),p=r,O=u["".concat(i,".").concat(p)]||u[p]||d[p]||o;return n?l.a.createElement(O,a({ref:t},b,{components:n})):l.a.createElement(O,a({ref:t},b))}));function O(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var b=2;b<o;b++)i[b]=n[b];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);